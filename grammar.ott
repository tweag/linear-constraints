
%% Ott grammar for linear constraints work

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Metavariables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar x,y,z,f ::= {{ com Term variables }}
metavar a,b  ::= {{ com Type variables }}
metavar K  ::= {{ com Data constructors }}
metavar T  ::= {{ com Type constructors }}
metavar q  ::= {{ com Atomic constraints }}
indexvar i, j ::=  {{ com Index variables }}
indexvar g, w, r, o, ext ::=  {{ com Annotation variables }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Grammar  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Top level    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

toplevel :: 'Toplevel_' ::= {{ com Entry point of the grammar }}
| { parsable } :: :: parsable {{ tex [[parsable]] }}

parsable :: 'Parsable_' ::=  {{ com Toplevel productions allowed in Tex filtering }}
| QF  :: :: qf
| q   :: :: q  {{ tex \constraintfont{[[q]]} }}
| LCtx   :: :: L  {{ tex \constraintfont{[[LCtx]]} }}
| UCtx   :: :: U  {{ tex \constraintfont{[[UCtx]]} }}
| CF  :: :: cf
| t  :: :: t
| ts  :: :: ts
| piF  :: :: pi
| theta  :: :: theta
| e  :: :: e
| xs  :: :: xs
| as  :: :: as
| binding  :: :: binding
| G  :: :: g

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constraints  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

UCtx {{ tex \ottnt{U} }} :: 'SetCt_' ::= {{ com Set of atomic constraints }}
| emptyset        ::   :: Empty
| UCtx1 \u UCtx2  ::   :: Union  {{ tex [[UCtx1]] \cup [[UCtx2]] }}
| q               ::   :: One
| UCtx \u LCtx      ::   :: Forget {{ tex [[UCtx]] \cup [[LCtx]] }}

UCtxF :: 'SetCt_' ::= {{ com Formatted set of atomic constraints }}
| UCtx            ::   :: Formatted   {{ tex \constraintfont{[[UCtx]]} }}

LCtx {{ tex \ottnt{L} }} :: 'MultisetCt_' ::= {{ com Multiset of atomic constraints }}
| emptyset        ::   :: Empty
| LCtx1 \u LCtx2  ::   :: Union   {{ tex [[LCtx1]] \uplus [[LCtx2]] }}
| q               ::   :: One
| LCtx1 , LCtx2   ::   :: Append

LCtxF :: 'MultisetCt_' ::= {{ com Formatted multiset of atomic constraints }}
| LCtx            ::   :: Formatted   {{ tex \constraintfont{[[LCtx]]} }}

Q :: 'Ct_' ::=  {{ com Constraints }}
| ( UCtx , LCtx )    ::   :: Sets
| piF . q            ::   :: Atom   {{ tex [[piF]]\scale[[q]] }}
| Q1 * Q2            :: M :: Tensor
| Empty              :: M :: Empty  {{tex \mathbf{\varepsilon} }}
| ! Q                :: M :: Unrestricted
| Q [ theta ]        :: M :: Subst
| piF . Q            :: M :: Scale  {{tex [[piF]]\scale[[Q]]}}
| ( Q )              :: S :: Paren
% Empty case
| Top                ::   :: Top

qF :: 'ACt_' ::= {{ com Formatted atomic constraints }}
| q              ::   :: Formatted   {{ tex \constraintfont{[[q]]} }}

QF :: 'Ct_' ::= {{ com Formatted constraints }}
| Q              ::   :: Formatted   {{ tex \constraintfont{[[Q]]} }}

QQ {{ tex \mathcal{Q} }} :: 'G_' ::= {{ com Givens }}
| Q                ::   :: GivenConstraint
| QQ & Q           ::   :: With
| QQ1 * QQ2        ::   :: Tensor

C :: 'Ctg_' ::= {{ tex \constraintfont{[[C]]} }} {{ com Generated constraints}}
| Q                  ::   :: Simple
| C1 * C2            ::   :: Tensor
| C1 & C2            ::   :: With
| piF . ( Q => C )   ::   :: Impl  {{ tex [[piF]]\scale([[Q]] \Lolly [[C]]) }}
| ! C                ::   :: Unrestricted
| piF . C            :: M :: Scale  {{tex [[piF]]\scale[[C]]}}
| && C               :: M :: BigWith
| C [ theta ]        :: M :: Subst
| ( C )              :: S :: Paren

CF :: 'Ctg_' ::=  {{ com Generated constraints}}
| C                  ::   :: Formatted {{ tex \constraintfont{[[C]]} }}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Types  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

t {{ tex \tau }}, u {{ tex \upsilon }}, s {{ tex \sigma}} :: 'Type_' ::= {{ com Types }}
| a                      ::   :: Var
| QF =o t                ::   :: Qual
| t o= QF                ::   :: Carry
| forall as . t          ::   :: ForallNested
  {{ tex [[forall]] [[as]]. [[t]] }}
| exists as . t          ::   :: ExistsNested
  {{ tex [[exists]] [[as]]. [[t]] }}
| ts1 -> t2              :: S :: NestedUrFunction
| ts1 ->_ pisF t2           :: S :: Function  {{ tex [[ts1]] \to_{[[pisF]]} [[t2]] }}
| T ts                   ::   :: TyConApp
| t [ theta ]            :: M :: Subst
| ( t )                  :: S :: Paren
% Desugared types (see also expressions)
| Ds ( t )               :: M :: Desugared
  {{ tex \dstype{[[t]]} }}
| Ev ( q )               :: M :: Evidence
  {{ tex \dsevidence{\constraintfont{[[q]]} } }}
| Ev ( Q )               :: M :: EvSimple
  {{ tex \dsevidence{\constraintfont{[[Q]]} } }}
| Ev ( Hole )            :: S :: EvHole
  {{ tex \dsevidence{\constraintfont{[[Hole]]} } }}
| Ur t                   ::   :: Unrestricted
| unit                   ::   :: Unit   {{ tex \mathbf{1} }}
| t1 ** t2               ::   :: Prod
| t1 o- t2               ::   :: DsCarry
% used for talking about Ds(_) as a family
| Hole                   :: S :: Hole

ts {{ tex \overline{\tau} }}, us {{ tex \overline{\upsilon} }}, ss {{ tex \overline{\sigma} }}
  :: 'Types_' ::= {{ com List of types }}
| empty                  ::   :: None
| t                      ::   :: One
| ts1 , .... , tsi       ::   :: Many
| as                     :: M :: Vars

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Multiplicities  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pi {{ tex \pi }}, rho {{ tex \rho }} :: 'Mult_' ::= {{ com Multiplicities }}
  | 1                    ::   :: One
  | omega                ::   :: Many
  | pi1 . pi2            :: M :: Mult  {{ tex [[pi1]]{â‹…}[[pi2]] }}
  | pi1 + pi2            :: M :: Add
  | ( pi )               :: S :: Paren
  % I'd like to avoid multiplicity variables if we can, as they are
  % not very relevant to our discussion

piF :: 'Mult_' ::= {{ com Multiplicities formatted }}
| pi   ::   :: Formatted {{ tex \multiplicityfont{[[pi]]} }}

pis {{ tex \overline{\pi} }} :: 'Mults_' ::= {{ com Lists of multiplicities }}
| empty                  ::   :: None
| pi                     ::   :: One
| pis1 , .... , pisi      ::   :: Many

pisF :: 'Mults_' ::= {{ com Lists of multiplicities formatted }}
| pis   ::   :: Formatted {{ tex \multiplicityfont{[[pis]]} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Substitutions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

theta {{ tex \theta }} :: 'Subst_' ::= {{ com Substitutions }}
| ts / as                ::   :: Mappings

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Expressions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

e :: 'Expr_' ::= {{ com Expressions }}
| x                      ::   :: Var
| K                      ::   :: DataCon
| \ x . e                ::   :: Lam
| e1 e2                  ::   :: App
| pack e                 ::   :: Pack
| unpack x = e1 in e2    ::   :: Unpack
| LET x = e1 in e2       ::   :: Let
| LET x : s = e1 in e2   ::   :: LetSig
| CASE e of { alts }     ::   :: Case
| ( e )                  :: S :: Paren
% Cheating a little by adding desugared expressions to the same grammar below.
% This is not formally correct, but it should do.
| Ev ( Q1 ||- Q2 )       :: M :: Evidence
  {{ tex \dsevidence{\constraintfont{[[Q1]]} [[||-]] \constraintfont{[[Q2]]} } }}
| Ds ( z ; Ty )          :: M :: Desugar
  {{ tex \dsterm{[[z]]}{[[Ty]]} }}
| Ds ( z ; Hole )          :: S :: DesugarHole
  {{ tex \dsterm{[[z]]}{[[Hole]]} }}
| Ur                     :: M :: UnrestrictedCon
| urify ( QF ; e )       :: M :: Urify  {{ tex \underline{[[e]]}_{[[QF]]} }}
| urify ( e )            :: M :: UrifyShortened {{ tex \underline{[[e]]} }}
| (,)                    ::   :: ProdCon
  {{ tex ({,}) }}
| ( e1 , e2 )            :: M :: Prod
| ()                     ::   :: UnitCon
| unpack ( pat1 , pat2 ) = e1 in e2    ::   :: UnpackProd

CASE :: 'CaseHead_' ::= {{ com Case head }}
| case_ piF   ::  :: Case {{ tex \kcase_[[piF]] }}

LET :: 'LetHead_' ::= {{ com Let head }}
| let_ piF    ::  :: Let  {{ tex \klet_[[piF]] }}

alt :: 'Alt_' ::= {{ com Case alternative }}
| pat -> e              ::   :: Alt

pat :: 'Pat_' ::= {{ com Patterns }}
% We should consider making a category K, instead of using an expression everywhere a constructor is needed.
| x                          ::   :: Var
| e0 xs                      ::   :: Con
| ()                         ::   :: Unit
| ( pat1 , pat2 )            :: M :: Prod
| urified ( QF ; pat )        :: M :: Urified  {{ tex \underline{[[pat]]}_{[[QF]]} }}
| urified ( pat )            :: M :: UrifiedShortened  {{ tex \underline{[[pat]]} }}

alts {{ tex \overline{\ottmv{K}_i\ \overline{\ottmv{x}_i } \to \ottnt{e}_i } }}
  :: 'Alts_' ::= {{ com Case alternatives }}
| empty                  ::   :: None
| alt                    ::   :: One
| < alt >                ::   :: Schema
| alts1 ; .... ; altsi   ::   :: Many

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Variables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

xs {{ tex \overline{\ottmv{x} } }} :: 'Termvars_' ::=
| empty                  ::   :: None
| x                      ::   :: One
| xs1 , .... , xsi       ::   :: Many

as {{ tex \overline{\ottmv{a} } }} :: 'Tyvars_' ::=
| empty                  ::   :: None
| a                      ::   :: One
| as1 , .... , asi       ::   :: Many
| a1 .... ai             ::   :: ManyBinds

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

binding :: 'Binding_' ::= {{ com Context binding }}
| x :_ piF t           ::    :: Bnd
  {{ tex [[x]]{:}_{[[piF]]}[[t]] }}

G {{ tex \Gamma }}, D {{ tex \Delta }} :: 'Ctx_' ::= {{ com Contexts }}
| empty             ::   :: None
| binding           ::   :: One
| { binding }       ::   :: OneWithBraces
| G1 , .... , Gi    ::   :: Many
| G1 + G2           :: M :: Add
| Sum G2            :: M :: BigSum
| piF . G            :: M :: Scale {{ tex [[piF]]\scale[[G]]}}
| < binding >       :: M :: Repeat  {{ tex \overline{[[binding]]} }}
| ( G )             :: S :: Paren
% Desugared contexts (see also expressions)
| G1 \u G2          :: M :: Union
  {{ tex [[G1]] \cup [[G2]] }}
| Ds ( G )          :: M :: DsCtx
  {{ tex \dstype{[[G]]} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Terminals  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

terminals :: 'terminals_' ::=
| &           ::   :: With    {{ tex \aand }}
| &&          ::   :: BigWith {{ tex \bigaand }}
| *           ::   :: Tensor  {{ tex \qtensor }}
| **          ::   :: TypeTensor {{ tex \otimes }}
| |-          ::   :: entails {{ tex \vdash }}
| |->         ::   :: infer {{ tex \vdashi }}
| |-s         ::   :: solve {{ tex \vdashs }}
| |-simp      ::   :: solve_simples {{ tex \vdashsimp }}
| ||-         ::   :: Entails {{ tex \Vdash }}
| ~>          ::   :: generates {{ tex \leadsto }}
| \           ::   :: Lambda  {{ tex \lambda }}
| ->          ::   :: Arrow   {{ tex \to }}
| forall      ::   :: Forall  {{ tex \forall }}
| exists      ::   :: Exists  {{ tex \exists }}
| =o          ::   :: Lolli   {{ tex \Lolly }}
| o=          ::   :: illoL   {{ tex \RLolly }}
| o-          ::   :: illol   {{ tex \otimes }}
| \in         ::   :: In      {{ tex \in }}
| \notin      ::   :: NotIn   {{ tex \notin }}
| omega       ::   :: Many    {{ tex \omega }}
| Sum         ::   :: BigSum  {{ tex \sum }}
| empty       ::   :: emptyseq {{ tex âˆ™ }} % alternative: Ïµ
| Top         ::   :: Top     {{ tex \constraintfont{âŠ¤} }}
| emptyset    ::   :: emptyset {{ tex \emptyset }}
| \subseteq   ::   :: subset   {{ tex \subseteq }}
| Hole        ::   :: Hole     {{ tex \_ }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Formulae  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

formula :: formula_ ::=
| judgement                       ::   :: judgement
| formula \\\\                    ::   :: lbh
  {{ tex [[formula]] \ottlinebreakhack }}
  % See ottalt, sec. 1.1
| formula1 .... formulai          ::   :: dots
| as fresh                        ::   :: fresh
  {{ tex [[as]] \text{ fresh} }}
| < formula >                     ::   :: Repeat
  {{ tex \overline{[[formula]]} }}
| e : t                           ::   :: DataconTy
| x \notin G                      ::   :: NotInCtx
| binding \in G                   ::   :: binding_in
| G1 = G2                         ::   :: ctx_equal
| LCtxF1 \subseteq LCtxF2         ::   :: subset
| qF \in UCtxF                    ::   :: q_in_UCtx
| qF \notin UCtxF                 ::   :: q_notin_UCtx
| qF \notin LCtxF                 ::   :: q_notin_LCtx

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Parsing rules  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

parsing

Type_ExistsNested <= Type_Carry
Type_ExistsNested <= Type_DsCarry
Ct_Tensor <= Ct_Unrestricted
Ct_Tensor <= Ct_Scale
Ct_Tensor <= Ct_Subst
Ctg_Tensor <= Ctg_Unrestricted
Ctg_Tensor <= Ctg_Scale
Ctg_Tensor <= Ctg_Subst
Ctx_Add <= Ctx_Scale
