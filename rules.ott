
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Entailment  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Qs :: '' ::=


defn
QQ1 ||- Q2 :: :: Qrules :: 'Q_' {{ com Constraint entailment }}
by

% left abstract

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Entailment  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Log :: '' ::=

defn
Q |- C :: :: Crules :: 'C_'  {{ com Generalised constraint entailment }}
by

Q1 ||- Q2
--------- :: Dom
Q1 |- Q2

Q1 |- C1
Q2 |- C2
-------------- :: Tensor
Q1*Q2 |- C1*C2

Q |- C1
Q |- C2
------------- :: With
Q |- C1 & C2

Q0*Q1 |- C
------------- :: Impl
pi. Q0 |- pi.(Q1 => C)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Typing rules  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Ty :: '' ::=

defn
Q ; G |- e : t :: :: Ty :: 'E_' {{ com Expression typing }}
by

x :_1 forall as. Q1 =o u \in G
Q ||- Q1[ts/as]
-------------- :: Var
Q;G |- x : u[ts/as]

Q;G, x:_pi t1 |- e : t2
---------------------- :: Abs
Q;G |- \x.e : t1 ->_pi t2

Q1;G1 |- e1 : t1 ->_pi t
Q2; G2 |- e2 : t1
------------------------------ :: App
Q1*pi.Q2;G1+pi.G2 |- e1 e2 : t

Q ; G |- e : t[us/as]
------------------------- :: Pack
omega.Q * Q1[us/as];omega.G |- pack e : exists as. t o= Q1

Q1;G1 |- e1 : exists as. t1 o= Q
freshness condition on as
Q2 * Q;G2,x:_omega t1 |- e2 : t
------------------------------------------------- :: Unpack
Q1 * Q2;G1 + G2 |- unpack x = e1 in e2 : t

Q1;G1 |- e1 : t1
Q2;G2,x:_pi t1 |- e2 : t
--------------------------- :: Let
pi.Q1 * Q2 ;pi.G1+G2 |- let x = e1 in e2 : t

Q1;G1 |- e : T ts
< Ki : forall as. usi ->_pisi T as >
< Q2; G2, < xi :_(pi.pii) ui[ts/as] > |- ei : t >
------------------------- :: Case
pi.Q1*Q2;pi.G1+G2 |- case e of { alts } : t

Q1;G |- e : t
Q1 ||- Q
------------------------- :: Sub
Q;G |- e : t

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constraint generation  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Gen :: '' ::=

defn
G |-> e : t ~> C :: :: Gen :: 'G_' {{ com Constraint generation }}
by

x :_1 forall as. Q =o u \in G
------------------------------ :: Var
G |-> x : u[ts/as] ~> Q[ts/as]

G, x:_pi t0 |-> e : t ~> C
------------------------------ :: Abs
G |-> \x. e : t0 ->_pi t ~> C

G1 |-> e1 : t2 ->_pi t ~> C1
G2 |-> e2 : t2 ~> C2
------------------------------ :: App
G1 + pi.G2 |-> e1 e2 : t ~> C1 * pi.C2

G |-> e : T ss ~> C
Ki : forall as. usi ->_pisi T as
D, <xi:_(pi.pii) ui[ss/as]> |-> ei : t ~> Ci
------------------------------ :: Case
pi.G + D |-> case e of {alts} : t ~> pi.C * && Ci

G1 |-> e1 : exists as. t1 o= Q1 ~> C1
as fresh
G2, x:_omega t1 |-> e2 : t ~> C2
------------------------------ :: Unpack
G1+G2 |-> unpack x = e1 in e2 : t ~> C1 * Q1 => C2

G |-> e : t[us/as] ~> C
------------------------------ :: Pack
omega.G |-> pack e : exists as. t o= Q ~> omega.C * Q[us/as]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constraint solver  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Solve :: '' ::=

defn
Q_g |-s C_w ~> Q_o ; Q_r :: :: Solve :: 'S_' {{ com Constraint solving }}
by

% todo
