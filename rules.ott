
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Entailment  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Qs :: '' ::=


defn
QQ1 ||- Q2 :: :: Qrules :: 'Q_' {{ com Constraint entailment }}
by

% left abstract

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Typing rules  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Ty :: '' ::=

defn
Q ; G |- e : t :: :: Ty :: 'E_' {{ com Expression typing }}
by

x : forall as. Q1 =o u \in G
Q ||- Q1[ts/as]
-------------- :: Var
Q;G |- x : u[ts/as]

Q;G, x:t1 |- e : t2
---------------------- :: Abs
Q;G |- \x.e : t1 -> t2

Q1;G |- e1 : t1 -> t
Q2; G |- e2 : t1
---------------- :: App
Q1*Q2;G |- e1 e2 : t

Q*Q1;G |- e : t[ts/as]
------------------------- :: Pack
Q;G |- pack e : exists as. t o= Q1

Q1';G |- e1 : exists as. t1 o= Q1
freshness condition on as
Q2' * Q1;G,x:t1 |- e2 : t
------------------------------ :: Unpack
Q1'*Q2';G |- unpack x = e1 in e2 : t

Q1;G |- e1 : t1
Q;G,x:Q1 =o t1 |- e2 : t
--------------------------- :: Let
Q;G |- let x = e1 in e2 : t

Q1;G |- e : T ts
< Ki : forall as. usi -> T as >
< Q2; G, < xi : ui[ts/as] > |- ei : t >
------------------------- :: Case
Q1*Q2;G |- case e of { alts } : t

Q1;G |- e : t
Q1 ||- Q
------------------------- :: Sub
Q;G |- e : t
