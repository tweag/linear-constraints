
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Entailment  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Qs :: '' ::=


defn
QF1 ||- QF2 :: :: Qrules :: 'Q_' {{ com Constraint entailment }}
by

------------------ :: Hyp
omega.Q * pi.q ||- pi.q

Q1 ||- Q1'   Q2 ||- Q2'
----------------------- :: Prod
Q1*Q2 ||- Q1' * Q2'

------------------ :: Empty
omega.Q ||- Empty

------------------ :: WeakD
1.Linearly ||- Empty

------------------ :: ContractD
1.Linearly ||- 1.Linearly * 1.Linearly

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Entailment  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Entail :: '' ::=

defn
QF |- CF :: :: Crules :: 'C_'  {{ com Generalised constraint entailment }}
by

Q1 ||- Q2 \\\\
Q2 |- Q3
--------- :: Dom
Q1 |- Q3

--------- :: Id
Q |- Q

Q1 |- C1
Q2 |- C2
-------------- :: Tensor
Q1*Q2 |- C1*C2

Q |- C1
Q |- C2
------------- :: With
Q |- C1 & C2

Q0*Q1 |- C
------------- :: Impl
pi. Q0 |- pi.(Q1 => C)

------------- :: Top
Q |- Top


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Typing rules  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Ty :: '' ::=

defn
QF ; G |- e : t :: :: Ty :: 'E_' {{ com Expression typing }}
by

G1 = x :_1 forall as. Q1 =o u
--------------------------- :: Var
Q1[ts/as];G1+omega.G2 |- x : u[ts/as]

Q;G, x:_pi t1 |- e : t2
---------------------- :: Abs
Q;G |- \x.e : t1 ->_pi t2

Q1;G1 |- e1 : t1 ->_pi t
Q2; G2 |- e2 : t1
------------------------------ :: App
Q1*pi.Q2;G1+pi.G2 |- e1 e2 : t

Q ; G |- e : t[us/as]
------------------------- :: Pack
Q * Q1[us/as];G |- pack e : exists as. t o= Q1

Q1;G1 |- e1 : exists as. t1 o= Q
as fresh
Q2 * Q;G2,x:_1 t1 |- e2 : t
------------------------------------------------- :: Unpack
Q1 * Q2;G1 + G2 |- unpack x = e1 in e2 : t

Q1*Q;G1 |- e1 : t1
Q2;G2,x:_pi Q =o t1 |- e2 : t
--------------------------- :: Let
pi.Q1*Q2 ;pi.G1+G2 |- let_pi x = e1 in e2 : t

Q1*Q;G1 |- e1 : t1
as fresh
s = forall as.Q =o t1
Q2;G2,x:_pi forall as.Q =o t1 |- e2 : t
--------------------------- :: LetSig
pi.Q1 * Q2 ;pi.G1+G2 |- let_pi x : s = e1 in e2 : t

Q1;G1 |- e : T ts
Ki : forall as. usi ->_pisi T as
Q2; G2, < xi :_(pi.pii) ui[ts/as] > |- ei : t
------------------------- :: Case
pi.Q1*Q2;pi.G1+G2 |- case_pi e of { alts } : t

Q1;G |- e : t
Q ||- Q1
------------------------- :: Sub
Q;G |- e : t

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constraint generation  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Gen :: '' ::=

defn
G |-> e : t ~> CF :: :: Gen :: 'G_' {{ com Constraint generation }}
by

G1 = x :_1 forall as. Q =o u
------------------------------ :: Var
G1 + omega.G2 |-> x : u[ts/as] ~> Q[ts/as]

G, x:_pi t0 |-> e : t ~> C
------------------------------ :: Abs
G |-> \x. e : t0 ->_pi t ~> C

G1 |-> e1 : t2 ->_pi t ~> C1
G2 |-> e2 : t2 ~> C2
------------------------------ :: App
G1 + pi.G2 |-> e1 e2 : t ~> C1 * pi.C2

G |-> e : T ss ~> C
Ki : forall as. usi ->_pisi T as
D, <xi:_(pi.pii) ui[ss/as]> |-> ei : t ~> Ci
------------------------------ :: Case
pi.G + D |-> case_pi e of {alts} : t ~> pi.C * && Ci

G1 |-> e1 : exists as. t1 o= Q1 ~> C1
as fresh
G2, x:_1 t1 |-> e2 : t ~> C2
------------------------------ :: Unpack
G1+G2 |-> unpack x = e1 in e2 : t ~> C1 * 1.(Q1 => C2)

G |-> e : t[us/as] ~> C
------------------------------ :: Pack
G |-> pack e : exists as. t o= Q ~> C * Q[us/as]


G1 |-> e1 : t1 ~> C1
G2, x:_pi t1 |-> e2 : t ~> C2
------------------------------ :: Let
pi.G1+G2 |-> let_pi x = e1 in e2 : t ~> pi.C1 * C2

G1 |-> e1 : t1 ~> C1
Q_r * Q |- C1
G2, x:_pi Q =o t1 |-> e2 : t ~> C2
------------------------------ :: LetGen
pi.G1+G2 |-> let_pi x = e1 in e2 : t ~> pi.Q_r * C2

G1 |-> e1 : t1 ~> C1
as fresh
G2, x:_pi forall as. Q =o t1 |-> e2 : t ~> C2
------------------------------ :: LetSig
pi.G1+G2 |-> let_pi x : forall as. Q =o t1 = e1 in e2 : t ~> C2 * pi.(Q => C1)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constraint solver  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Solve :: '' ::=

defn
UCtxF ; DCtxF ; LCtxF |-s CF_w ~> LCtxF_o :: :: Solve :: 'S_' {{ com Constraint solving }}
by

UCtx ; DCtx ; LCtx_i |-simp pi.q ~> LCtx_o
---------------------------------------------- :: Atom
UCtx ; DCtx ; LCtx_i |-s pi.q ~> LCtx_o

UCtx ; DCtx ; LCtx_i |-s C1 ~> LCtx_o  UCtx ; DCtx ; LCtx_i |-s C2 ~> LCtx_o
--------------------------------------------------------------- :: Add
UCtx ; DCtx ; LCtx_i |-s C1 & C2 ~> LCtx_o

UCtx ; DCtx ; LCtx_i |-s C1 ~> LCtx_o'  UCtx ; DCtx ; LCtx_o' |-s C2 ~> LCtx_o
------------------------------------------------------------- :: Mult
UCtx ; DCtx ; LCtx_i |-s C1 * C2 ~> LCtx_o

UCtx \u UCtx0 ; DCtx \u (LCtx0 \n Dup) ; LCtx_i \u (LCtx0 \m Dup) |-s C ~> LCtx_o
LCtx_o \subseteq LCtx_i
---------------------------------------------- :: ImplOne
UCtx ; DCtx ; LCtx_i |-s 1.((UCtx0, LCtx0) => C) ~> LCtx_o

UCtx \u UCtx0 ; LCtx0 \n Dup; LCtx0 \m Dup |-s C ~> emptyset
---------------------------------------------- :: ImplMany
UCtx ; DCtx ; LCtx_i |-s omega . ((UCtx0, LCtx0) => C) ~> LCtx_i

defn
UCtxF ; DCtxF ; LCtxF |-simp piF . qF ~> LCtxF_o :: :: SolveSimple :: 'Atom_' {{ com Atomic constraint solving }}
  {{ tex [[UCtxF]]; [[DCtxF]]; [[LCtxF]] [[|-simp]] [[piF]] \scale [[qF]] [[~>]] [[LCtxF_o]] }}
by

q \in UCtx
-------------------------------- :: Many
UCtx ; DCtx ; LCtx |-simp omega.q ~> LCtx

LCtx = LCtx1 , q , LCtx2
q \notin LCtx2
q \notin UCtx
-------------------------------- :: OneL
UCtx ; DCtx ; LCtx |-simp 1.q ~> LCtx1 , LCtx2

Linearly \notin UCtx
-------------------------------- :: OneD
UCtx ; DCtx, Linearly ; LCtx |-simp 1.q ~> LCtx

q \in UCtx
q \notin DCtx \u LCtx
-------------------------------- :: OneU
UCtx ; DCtx ; LCtx |-simp 1.q ~> LCtx

% todo

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Desugared expressions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Core :: '' ::=

defn
G |- e : t :: :: Core :: 'L_' {{ com Core language }}
by

x :_1 forall as. u \in G
------------------------- :: Var
G |- x : u[ts/as]

G, x:_pi t1 |- e : t2
------------------------ :: Abs
G |- \x.e : t1 ->_pi t2

G1 |- e1 : t1 ->_pi t
G2 |- e1 : t1
------------------------- :: App
G1 + pi.G2 |- e1 e2 : t

G1 |- e1 : t1[us/as]
G2 |- e2 : t2[us/as]
------------------------------------------ :: Pack
G1+G2 |- pack (e1, e2) : exists as.t2 o- t1

G1 |- e1 : exists as. t2 o- t1
as fresh
G2,x:_1 t1,y:_1 t2 |- e2 : t
------------------------------------ :: Unpack
G1+G2 |- unpack (x,y) = e1 in e2 : t

G1 |- e1 : t1
G2, x:_pi s |- e2 : t
----------------------------------- :: Let
pi.G1 + G2 |- let_pi x : s = e1 in e2 : t

G1 |- e : T ts
Ki : forall as. usi ->_pisi T as
G2, < xi :_(pi.pii) ui[ts/as] > |- ei : t
------------------------------------------------ :: Case
pi.G1+G2 |- case_pi e of { alts } : t
